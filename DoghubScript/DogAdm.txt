if game.PlaceId ~= 4924922222 then
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Oh No",
        Text = "Este script s√≥ pode ser usado no jogo oficial.",
        Duration = 5
    })
    return -- cancela o script
end

-- Check if in the correct game
if game.PlaceId ~= 4924922222 then
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Oh No",
        Text = "Este script s√≥ pode ser usado no jogo oficial.",
        Duration = 5
    })
    return
end

-- Loader UI
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")

if CoreGui:FindFirstChild("DogHubLoading") then 
    CoreGui:FindFirstChild("DogHubLoading"):Destroy()
end

local gui = Instance.new("ScreenGui", CoreGui)
gui.Name = "DogHubLoading"
gui.IgnoreGuiInset = true
gui.ResetOnSpawn = false
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.DisplayOrder = 999

local mainContainer = Instance.new("Frame", gui)
mainContainer.Size = UDim2.new(1, 0, 1, 0)
mainContainer.BackgroundTransparency = 1
mainContainer.BorderSizePixel = 0

-- Fade-in overlay
local fadeOverlay = Instance.new("Frame", mainContainer)
fadeOverlay.Size = UDim2.new(1, 0, 1, 0)
fadeOverlay.BackgroundColor3 = Color3.new(0, 0, 0)
fadeOverlay.BackgroundTransparency = 0
fadeOverlay.BorderSizePixel = 0
fadeOverlay.ZIndex = 10

TweenService:Create(fadeOverlay, TweenInfo.new(1.2, Enum.EasingStyle.Quint), {
    BackgroundTransparency = 1
}):Play()

local centralBox = Instance.new("Frame", mainContainer)
centralBox.AnchorPoint = Vector2.new(0.5, 0.5)
centralBox.Position = UDim2.new(0.5, 0, 0.5, 0)
centralBox.Size = UDim2.new(0, 300, 0, 180)
centralBox.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
centralBox.BackgroundTransparency = 1
centralBox.BorderSizePixel = 0

local boxCorner = Instance.new("UICorner", centralBox)
boxCorner.CornerRadius = UDim.new(0.05, 0)

local boxStroke = Instance.new("UIStroke", centralBox)
boxStroke.Color = Color3.fromRGB(180, 180, 255)
boxStroke.Transparency = 1
boxStroke.Thickness = 1.2

TweenService:Create(centralBox, TweenInfo.new(0.8, Enum.EasingStyle.Quint, Enum.EasingDirection.Out, 0.3), {
    BackgroundTransparency = 0.3
}):Play()

TweenService:Create(boxStroke, TweenInfo.new(0.8, Enum.EasingStyle.Quint, Enum.EasingDirection.Out, 0.3), {
    Transparency = 0.5
}):Play()

local innerContainer = Instance.new("Frame", centralBox)
innerContainer.AnchorPoint = Vector2.new(0.5, 0.5)
innerContainer.Position = UDim2.new(0.5, 0, 0.5, 0)
innerContainer.Size = UDim2.new(0.9, 0, 0.9, 0)
innerContainer.BackgroundTransparency = 1

local title = Instance.new("TextLabel", innerContainer)
title.Size = UDim2.new(1, 0, 0, 40)
title.Position = UDim2.new(0, 0, 0.1, 0)
title.Text = "DOGHUB"
title.Font = Enum.Font.GothamBlack
title.TextColor3 = Color3.new(1, 1, 1)
title.TextSize = 28
title.TextTransparency = 1
title.BackgroundTransparency = 1
title.TextXAlignment = Enum.TextXAlignment.Center

TweenService:Create(title, TweenInfo.new(1.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out, 0.4), {
    TextTransparency = 0,
    Position = UDim2.new(0, 0, 0, 0)
}):Play()

local status = Instance.new("TextLabel", innerContainer)
status.Size = UDim2.new(1, -40, 0, 24)
status.Position = UDim2.new(0, 20, 0.4, 0)
status.Text = ""
status.Font = Enum.Font.GothamMedium
status.TextColor3 = Color3.fromRGB(220, 220, 255)
status.TextSize = 16
status.TextTransparency = 1
status.BackgroundTransparency = 1
status.TextXAlignment = Enum.TextXAlignment.Center

local progressBG = Instance.new("Frame", innerContainer)
progressBG.Size = UDim2.new(1, -60, 0, 4)
progressBG.Position = UDim2.new(0, 30, 0.7, 0)
progressBG.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
progressBG.BackgroundTransparency = 1
progressBG.BorderSizePixel = 0

Instance.new("UICorner", progressBG).CornerRadius = UDim.new(1, 0)

local progressBar = Instance.new("Frame", progressBG)
progressBar.Size = UDim2.new(0, 0, 1, 0)
progressBar.BackgroundColor3 = Color3.fromRGB(180, 120, 255)
progressBar.BackgroundTransparency = 1
progressBar.BorderSizePixel = 0
Instance.new("UICorner", progressBar).CornerRadius = UDim.new(1, 0)

local progressText = Instance.new("TextLabel", innerContainer)
progressText.Size = UDim2.new(1, -60, 0, 20)
progressText.Position = UDim2.new(0, 30, 0.8, 0)
progressText.Text = ""
progressText.Font = Enum.Font.Gotham
progressText.TextColor3 = Color3.fromRGB(200, 200, 255)
progressText.TextSize = 12
progressText.TextTransparency = 1
progressText.BackgroundTransparency = 1
progressText.TextXAlignment = Enum.TextXAlignment.Center

task.spawn(function()
    task.wait(0.5)
    
    TweenService:Create(progressBG, TweenInfo.new(0.8, Enum.EasingStyle.Quint, Enum.EasingDirection.Out, 0.5), {
        BackgroundTransparency = 0.3
    }):Play()
    
    TweenService:Create(progressBar, TweenInfo.new(0.8, Enum.EasingStyle.Quint, Enum.EasingDirection.Out, 0.5), {
        BackgroundTransparency = 0
    }):Play()
    
    TweenService:Create(progressText, TweenInfo.new(0.8, Enum.EasingStyle.Quint, Enum.EasingDirection.Out, 0.7), {
        TextTransparency = 0.5
    }):Play()
    
    TweenService:Create(status, TweenInfo.new(0.8, Enum.EasingStyle.Quint, Enum.EasingDirection.Out, 0.3), {
        TextTransparency = 0
    }):Play()
end)

local loadingMessages = {
    "Conectando aos servidores...",
    "Verificando seguran√ßa...",
    "Carregando recursos...",
    "Otimizando desempenho...",
    "Preparando ambiente...",
    "Finalizando...",
    "Pronto!"
}

-- Function to load the main script after loading screen
local function loadMainScript()
    local loadstring = loadstring or function(code) return load(code) end
    
    local success, err = pcall(function()
        local githubUrl = "https://raw.githubusercontent.com/DoghubUser/Doghub/main/DoghubScript/loader.txt"
        local response = game:HttpGet(githubUrl, true)
        return loadstring(response)()
    end)
    
    if not success then
        warn("Falha ao carregar o DogHub: " .. tostring(err))
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "DogHub Error",
            Text = "Failed to load: " .. tostring(err),
            Duration = 5
        })
    end
end

task.spawn(function()
    task.wait(1.5)
    
    for i, msg in ipairs(loadingMessages) do
        status.Text = ""
        for j = 1, #msg do
            status.Text = string.sub(msg, 1, j)
            task.wait(0.03)
        end
        
        local progress = i/#loadingMessages
        TweenService:Create(progressBar, TweenInfo.new(0.8, Enum.EasingStyle.Quint), {
            Size = UDim2.new(progress, 0, 1, 0),
            BackgroundColor3 = Color3.fromHSV(progress*0.3, 0.8, 1)
        }):Play()
        
        for p = 0, 100*progress, 2 do
            progressText.Text = math.floor(p).."%"
            task.wait(0.02)
        end
        
        task.wait(0.5)
    end
    
    TweenService:Create(boxStroke, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {
        Transparency = 1
    }):Play()
    
    task.wait(0.2)
    
    local exitSequence = {
        TweenService:Create(title, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {TextTransparency = 1}),
        TweenService:Create(status, TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.Out, 0.1), {TextTransparency = 1}),
        TweenService:Create(progressText, TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.Out, 0.2), {TextTransparency = 1}),
        TweenService:Create(progressBar, TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.Out, 0.3), {BackgroundTransparency = 1}),
        TweenService:Create(progressBG, TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.Out, 0.3), {BackgroundTransparency = 1}),
        TweenService:Create(centralBox, TweenInfo.new(0.8, Enum.EasingStyle.Quint, Enum.EasingDirection.Out, 0.4), {
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 320, 0, 190)
        }),
        TweenService:Create(fadeOverlay, TweenInfo.new(0.8, Enum.EasingStyle.Quint, Enum.EasingDirection.Out, 0.4), {
            BackgroundTransparency = 0
        })
    }
    
    for _, tween in ipairs(exitSequence) do
        tween:Play()
    end
    
    task.wait(1.2)
    

-- üê∂ Painel Administrativo
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Remotes = game:GetService("ReplicatedStorage"):WaitForChild("Remotes")

-- Criar janela
local Window = WindUI:CreateWindow({
    Title = "üê∂ Painel Administrativo",
    Icon = "user",
    Author = "‚ú®Melhor Experi√™ncia Mobile/PC‚ú®",
    Folder = "CloudHub",
    Size = UDim2.fromOffset(400, 300),
    Transparent = true,
    Theme = "Dark",
    Resizable = false,
    SideBarWidth = 180,
    Background = "",
    BackgroundImageTransparency = 0.42,
    HideSearchBar = true,
    ScrollBarEnabled = false,
})

local Tab = Window:Tab({ Title = "Principal", Icon = "settings" })

-- Vari√°veis
local selectedPlayer = nil
local cameraToggle = false
local dropdownElement = nil

-- Fun√ß√£o para obter nomes de jogadores
local function getPlayerNames()
    local list = {}
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer then
            table.insert(list, p.Name)
        end
    end
    return list
end

-- Se√ß√£o
Tab:Section({
    Title = "Principal ‚öôÔ∏è",
    TextXAlignment = "Left",
    TextSize = 15,
})

-- Dropdown
dropdownElement = Tab:Dropdown({
    Title = "Selecionar Jogador",
    Values = getPlayerNames(),
    Value = "",
    Callback = function(p)
        selectedPlayer = p
        print("[DEBUG] Jogador selecionado:", selectedPlayer)
    end
})

-- Atualizar Dropdown automaticamente
Players.PlayerAdded:Connect(function()
    task.wait(1)
    if dropdownElement and dropdownElement.SetValues then
        dropdownElement:SetValues(getPlayerNames())
        print("‚úÖ Jogador entrou - Dropdown atualizado.")
    end
end)

Players.PlayerRemoving:Connect(function()
    task.wait(1)
    if dropdownElement and dropdownElement.SetValues then
        dropdownElement:SetValues(getPlayerNames())
        print("‚ö†Ô∏è Jogador saiu - Dropdown atualizado.")
    end
end)

-- Teleportar
Tab:Button({
    Title = "Teleportar",
    Callback = function()
        if not selectedPlayer then
            return WindUI:Popup({
                Title = "Nenhum jogador selecionado",
                Content = "Selecione um jogador primeiro.",
                Buttons = { { Title = "Ok", Variant = "Primary" } }
            })
        end

        local target = Players:FindFirstChild(selectedPlayer)
        local hrpTarget = target and target.Character and target.Character:FindFirstChild("HumanoidRootPart")
        local hrpLocal = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

        if hrpTarget and hrpLocal then
            hrpLocal.CFrame = hrpTarget.CFrame
        end
    end
})

-- Visualizar jogador
Tab:Toggle({
    Title = "Visualizar Jogador",
    Desc = "Foca a c√¢mera no jogador selecionado.",
    Default = false,
    Callback = function(state)
        cameraToggle = state
        if not selectedPlayer then return end

        if state then
            task.spawn(function()
                while cameraToggle and selectedPlayer do
                    local target = Players:FindFirstChild(selectedPlayer)
                    local humanoid = target and target.Character and target.Character:FindFirstChild("Humanoid")
                    if humanoid then
                        Camera.CameraSubject = humanoid
                    end
                    task.wait(0.2)
                end
            end)
        else
            local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                Camera.CameraSubject = humanoid
            end
        end
    end
})

-- üìã Copiar Avatar
Tab:Button({
    Title = "üìã Copy Avatar FE",
    Desc = "Copia o avatar de outro jogador",
    Callback = function()
        if not selectedPlayer or selectedPlayer == "" then return end

        local targetPlayer = Players:FindFirstChild(selectedPlayer)
        if not targetPlayer or not targetPlayer.Character then return end

        local humanoid = targetPlayer.Character:FindFirstChildOfClass("Humanoid")
        if not humanoid then return end

        local targetDesc = humanoid:GetAppliedDescription()
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local myHumanoid = character:FindFirstChildOfClass("Humanoid")
        if not myHumanoid then return end

        local currentDesc = myHumanoid:GetAppliedDescription()

        local function applyItems(items)
            for _, item in ipairs(items) do
                if tonumber(item) then
                    Remotes.Wear:InvokeServer(tonumber(item))
                    task.wait(0.2)
                end
            end
        end

        -- Remover atuais
        applyItems({currentDesc.Shirt, currentDesc.Pants, currentDesc.Face})

        -- Corpo
        if Remotes:FindFirstChild("ChangeCharacterBody") then
            Remotes.ChangeCharacterBody:InvokeServer({
                targetDesc.Torso, targetDesc.RightArm, targetDesc.LeftArm,
                targetDesc.RightLeg, targetDesc.LeftLeg, targetDesc.Head
            })
            task.wait(0.5)
        end

        -- Roupas
        applyItems({targetDesc.Shirt, targetDesc.Pants, targetDesc.Face})

        -- Acess√≥rios
        for _, acc in ipairs(targetDesc:GetAccessories(true)) do
            if acc.AssetId and tonumber(acc.AssetId) then
                Remotes.Wear:InvokeServer(tonumber(acc.AssetId))
                task.wait(0.2)
            end
        end

        -- Cor da pele
        local skinColor = targetPlayer.Character:FindFirstChild("Body Colors")
        if skinColor and Remotes:FindFirstChild("ChangeBodyColor") then
            Remotes.ChangeBodyColor:FireServer(tostring(skinColor.HeadColor))
            task.wait(0.2)
        end

        -- Anima√ß√£o
        if tonumber(targetDesc.IdleAnimation) and Remotes:FindFirstChild("Wear") then
            Remotes.Wear:InvokeServer(tonumber(targetDesc.IdleAnimation))
        end
    end
})

-- RGB Name Toggle
Tab:Toggle({
    Title = "RP NAME RGB",
    Default = false,
    Callback = function(state)
        if _G.RGBNameLoop then
            _G.RGBNameLoop = false
        end

        if state then
            _G.RGBNameLoop = true
            local Remote = game:GetService("ReplicatedStorage"):WaitForChild("RE"):WaitForChild("1RPNam1eColo1r")

            local cores = {
                Color3.fromRGB(255, 0, 0),
                Color3.fromRGB(255, 128, 0),
                Color3.fromRGB(255, 255, 0),
                Color3.fromRGB(0, 255, 0),
                Color3.fromRGB(0, 255, 255),
                Color3.fromRGB(0, 128, 255),
                Color3.fromRGB(255, 0, 255),
            }

            task.spawn(function()
                local index = 1
                local function lerpColor(c1, c2, t)
                    return Color3.new(
                        c1.R + (c2.R - c1.R) * t,
                        c1.G + (c2.G - c1.G) * t,
                        c1.B + (c2.B - c1.B) * t
                    )
                end

                while _G.RGBNameLoop do
                    local c1 = cores[index]
                    local c2 = cores[(index % #cores) + 1]

                    for t = 0, 1, 0.05 do
                        if not _G.RGBNameLoop then return end
                        Remote:FireServer("PickingRPNameColor", lerpColor(c1, c2, t))
                        task.wait(0.05)
                    end

                    index = (index % #cores) + 1
                end
            end)
        end
    end
})

-- Rejoin
Tab:Button({
    Title = "Rejoin",
    Desc = "Essa Fun√ß√£o Reentra Dentro Do servidor.",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        if #game.JobId > 0 then
            TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
        else
            TeleportService:Teleport(game.PlaceId, LocalPlayer)
        end
    end
})

local Tab = Window:Tab({
    Title = "Trolls ",
    Icon = "user",
    Locked = false,
})

local Section = Tab:Section({ 
    Title = "Trolls üê∂",
    TextXAlignment = "Left",
    TextSize = 15,
})

local DropdownTroll = nil
local selectedTarget = nil

-- Dropdown din√¢mico de jogadores (Troll)
DropdownTroll = Tab:Dropdown({
    Title = "Selecionar Jogador (Troll)",
    Values = getPlayerNames(),
    Value = "",
    Callback = function(option)
        selectedTarget = option
        print("üéØ Jogador selecionado para troll:", option)
    end
})

-- Atualizar automaticamente ao entrar ou sair players
Players.PlayerAdded:Connect(function()
    task.wait(1)
    if DropdownTroll and DropdownTroll.SetValues then
        DropdownTroll:SetValues(getPlayerNames())
        print("‚úÖ Novo jogador entrou - DropdownTroll atualizado.")
    end
end)

Players.PlayerRemoving:Connect(function()
    task.wait(1)
    if DropdownTroll and DropdownTroll.SetValues then
        DropdownTroll:SetValues(getPlayerNames())
        print("‚ö†Ô∏è Jogador saiu - DropdownTroll atualizado.")
    end
end)
    
    gui:Destroy()
end)