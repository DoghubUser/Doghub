if game.PlaceId ~= 4924922222 then
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Oh No",
        Text = "Este script s√≥ pode ser usado no jogo oficial.",
        Duration = 5
    })
    return -- cancela o script
end

-- üê∂ Painel Administrativo
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Remotes = game:GetService("ReplicatedStorage"):WaitForChild("Remotes")

-- Criar janela
local Window = WindUI:CreateWindow({
    Title = "üê∂ Painel Administrativo",
    Icon = "user",
    Author = "‚ú®Melhor Experi√™ncia Mobile/PC‚ú®",
    Folder = "CloudHub",
    Size = UDim2.fromOffset(400, 300),
    Transparent = true,
    Theme = "Dark",
    Resizable = false,
    SideBarWidth = 180,
    Background = "",
    BackgroundImageTransparency = 0.42,
    HideSearchBar = true,
    ScrollBarEnabled = false,
})

local Tab = Window:Tab({ Title = "Principal", Icon = "settings" })

-- Vari√°veis
local selectedPlayer = nil
local cameraToggle = false
local dropdownElement = nil

-- Fun√ß√£o para obter nomes de jogadores
local function getPlayerNames()
    local list = {}
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer then
            table.insert(list, p.Name)
        end
    end
    return list
end

-- Se√ß√£o
Tab:Section({
    Title = "Principal ‚öôÔ∏è",
    TextXAlignment = "Left",
    TextSize = 15,
})

-- Dropdown
dropdownElement = Tab:Dropdown({
    Title = "Selecionar Jogador",
    Values = getPlayerNames(),
    Value = "",
    Callback = function(p)
        selectedPlayer = p
        print("[DEBUG] Jogador selecionado:", selectedPlayer)
    end
})

-- Atualizar Dropdown automaticamente
Players.PlayerAdded:Connect(function()
    task.wait(1)
    if dropdownElement and dropdownElement.SetValues then
        dropdownElement:SetValues(getPlayerNames())
        print("‚úÖ Jogador entrou - Dropdown atualizado.")
    end
end)

Players.PlayerRemoving:Connect(function()
    task.wait(1)
    if dropdownElement and dropdownElement.SetValues then
        dropdownElement:SetValues(getPlayerNames())
        print("‚ö†Ô∏è Jogador saiu - Dropdown atualizado.")
    end
end)

-- Teleportar
Tab:Button({
    Title = "Teleportar",
    Callback = function()
        if not selectedPlayer then
            return WindUI:Popup({
                Title = "Nenhum jogador selecionado",
                Content = "Selecione um jogador primeiro.",
                Buttons = { { Title = "Ok", Variant = "Primary" } }
            })
        end

        local target = Players:FindFirstChild(selectedPlayer)
        local hrpTarget = target and target.Character and target.Character:FindFirstChild("HumanoidRootPart")
        local hrpLocal = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

        if hrpTarget and hrpLocal then
            hrpLocal.CFrame = hrpTarget.CFrame
        end
    end
})

-- Visualizar jogador
Tab:Toggle({
    Title = "Visualizar Jogador",
    Desc = "Foca a c√¢mera no jogador selecionado.",
    Default = false,
    Callback = function(state)
        cameraToggle = state
        if not selectedPlayer then return end

        if state then
            task.spawn(function()
                while cameraToggle and selectedPlayer do
                    local target = Players:FindFirstChild(selectedPlayer)
                    local humanoid = target and target.Character and target.Character:FindFirstChild("Humanoid")
                    if humanoid then
                        Camera.CameraSubject = humanoid
                    end
                    task.wait(0.2)
                end
            end)
        else
            local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                Camera.CameraSubject = humanoid
            end
        end
    end
})

-- üìã Copiar Avatar
Tab:Button({
    Title = "üìã Copy Avatar FE",
    Desc = "Copia o avatar de outro jogador",
    Callback = function()
        if not selectedPlayer or selectedPlayer == "" then return end

        local targetPlayer = Players:FindFirstChild(selectedPlayer)
        if not targetPlayer or not targetPlayer.Character then return end

        local humanoid = targetPlayer.Character:FindFirstChildOfClass("Humanoid")
        if not humanoid then return end

        local targetDesc = humanoid:GetAppliedDescription()
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local myHumanoid = character:FindFirstChildOfClass("Humanoid")
        if not myHumanoid then return end

        local currentDesc = myHumanoid:GetAppliedDescription()

        local function applyItems(items)
            for _, item in ipairs(items) do
                if tonumber(item) then
                    Remotes.Wear:InvokeServer(tonumber(item))
                    task.wait(0.2)
                end
            end
        end

        -- Remover atuais
        applyItems({currentDesc.Shirt, currentDesc.Pants, currentDesc.Face})

        -- Corpo
        if Remotes:FindFirstChild("ChangeCharacterBody") then
            Remotes.ChangeCharacterBody:InvokeServer({
                targetDesc.Torso, targetDesc.RightArm, targetDesc.LeftArm,
                targetDesc.RightLeg, targetDesc.LeftLeg, targetDesc.Head
            })
            task.wait(0.5)
        end

        -- Roupas
        applyItems({targetDesc.Shirt, targetDesc.Pants, targetDesc.Face})

        -- Acess√≥rios
        for _, acc in ipairs(targetDesc:GetAccessories(true)) do
            if acc.AssetId and tonumber(acc.AssetId) then
                Remotes.Wear:InvokeServer(tonumber(acc.AssetId))
                task.wait(0.2)
            end
        end

        -- Cor da pele
        local skinColor = targetPlayer.Character:FindFirstChild("Body Colors")
        if skinColor and Remotes:FindFirstChild("ChangeBodyColor") then
            Remotes.ChangeBodyColor:FireServer(tostring(skinColor.HeadColor))
            task.wait(0.2)
        end

        -- Anima√ß√£o
        if tonumber(targetDesc.IdleAnimation) and Remotes:FindFirstChild("Wear") then
            Remotes.Wear:InvokeServer(tonumber(targetDesc.IdleAnimation))
        end
    end
})

-- RGB Name Toggle
Tab:Toggle({
    Title = "RP NAME RGB",
    Default = false,
    Callback = function(state)
        if _G.RGBNameLoop then
            _G.RGBNameLoop = false
        end

        if state then
            _G.RGBNameLoop = true
            local Remote = game:GetService("ReplicatedStorage"):WaitForChild("RE"):WaitForChild("1RPNam1eColo1r")

            local cores = {
                Color3.fromRGB(255, 0, 0),
                Color3.fromRGB(255, 128, 0),
                Color3.fromRGB(255, 255, 0),
                Color3.fromRGB(0, 255, 0),
                Color3.fromRGB(0, 255, 255),
                Color3.fromRGB(0, 128, 255),
                Color3.fromRGB(255, 0, 255),
            }

            task.spawn(function()
                local index = 1
                local function lerpColor(c1, c2, t)
                    return Color3.new(
                        c1.R + (c2.R - c1.R) * t,
                        c1.G + (c2.G - c1.G) * t,
                        c1.B + (c2.B - c1.B) * t
                    )
                end

                while _G.RGBNameLoop do
                    local c1 = cores[index]
                    local c2 = cores[(index % #cores) + 1]

                    for t = 0, 1, 0.05 do
                        if not _G.RGBNameLoop then return end
                        Remote:FireServer("PickingRPNameColor", lerpColor(c1, c2, t))
                        task.wait(0.05)
                    end

                    index = (index % #cores) + 1
                end
            end)
        end
    end
})

-- Rejoin
Tab:Button({
    Title = "Rejoin",
    Desc = "Essa Fun√ß√£o Reentra Dentro Do servidor.",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        if #game.JobId > 0 then
            TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
        else
            TeleportService:Teleport(game.PlaceId, LocalPlayer)
        end
    end
})

local Tab = Window:Tab({
    Title = "Trolls ",
    Icon = "user",
    Locked = false,
})

local Section = Tab:Section({ 
    Title = "Trolls üê∂",
    TextXAlignment = "Left",
    TextSize = 15,
})

local DropdownTroll = nil
local selectedTarget = nil

-- Dropdown din√¢mico de jogadores (Troll)
DropdownTroll = Tab:Dropdown({
    Title = "Selecionar Jogador (Troll)",
    Values = getPlayerNames(),
    Value = "",
    Callback = function(option)
        selectedTarget = option
        print("üéØ Jogador selecionado para troll:", option)
    end
})

-- Atualizar automaticamente ao entrar ou sair players
Players.PlayerAdded:Connect(function()
    task.wait(1)
    if DropdownTroll and DropdownTroll.SetValues then
        DropdownTroll:SetValues(getPlayerNames())
        print("‚úÖ Novo jogador entrou - DropdownTroll atualizado.")
    end
end)

Players.PlayerRemoving:Connect(function()
    task.wait(1)
    if DropdownTroll and DropdownTroll.SetValues then
        DropdownTroll:SetValues(getPlayerNames())
        print("‚ö†Ô∏è Jogador saiu - DropdownTroll atualizado.")
    end
end)

